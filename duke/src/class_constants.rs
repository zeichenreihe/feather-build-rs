//! A module containing all the constants used in Java Class Files.

pub(crate) const MAGIC: u32 = 0xCAFE_BABE;

pub(crate) mod pool {
	pub(crate) const UTF8: u8 = 1;
	pub(crate) const INTEGER: u8 = 3;
	pub(crate) const FLOAT: u8 = 4;
	pub(crate) const LONG: u8 = 5;
	pub(crate) const DOUBLE: u8 = 6;
	pub(crate) const CLASS: u8 = 7;
	pub(crate) const STRING: u8 = 8;
	pub(crate) const FIELD_REF: u8 = 9;
	pub(crate) const METHOD_REF: u8 = 10;
	pub(crate) const INTERFACE_METHOD_REF: u8 = 11;
	pub(crate) const NAME_AND_TYPE: u8 = 12;
	pub(crate) const METHOD_HANDLE: u8 = 15;
	pub(crate) const METHOD_TYPE: u8 = 16;
	pub(crate) const DYNAMIC: u8 = 17;
	pub(crate) const INVOKE_DYNAMIC: u8 = 18;
	pub(crate) const MODULE: u8 = 19;
	pub(crate) const PACKAGE: u8 = 20;

	pub(crate) mod method_handle_reference {
		pub(crate) const GET_FIELD: u8 = 1;
		pub(crate) const GET_STATIC: u8 = 2;
		pub(crate) const PUT_FIELD: u8 = 3;
		pub(crate) const PUT_STATIC: u8 = 4;
		pub(crate) const INVOKE_VIRTUAL: u8 = 5;
		pub(crate) const INVOKE_STATIC: u8 = 6;
		pub(crate) const INVOKE_SPECIAL: u8 = 7;
		pub(crate) const NEW_INVOKE_SPECIAL: u8 = 8;
		pub(crate) const INVOKE_INTERFACE: u8 = 9;
	}
}

pub(crate) mod attribute {
	pub(crate) const ANNOTATION_DEFAULT: &str = "AnnotationDefault";
	pub(crate) const BOOTSTRAP_METHODS: &str = "BootstrapMethods";
	pub(crate) const CODE: &str = "Code";
	pub(crate) const CONSTANT_VALUE: &str = "ConstantValue";
	pub(crate) const DEPRECATED: &str = "Deprecated";
	pub(crate) const ENCLOSING_METHOD: &str = "EnclosingMethod";
	pub(crate) const EXCEPTIONS: &str = "Exceptions";
	pub(crate) const INNER_CLASSES: &str = "InnerClasses";
	pub(crate) const LINE_NUMBER_TABLE: &str = "LineNumberTable";
	pub(crate) const LOCAL_VARIABLE_TABLE: &str = "LocalVariableTable";
	pub(crate) const LOCAL_VARIABLE_TYPE_TABLE: &str = "LocalVariableTypeTable";
	pub(crate) const METHOD_PARAMETERS: &str = "MethodParameters";
	pub(crate) const MODULE: &str = "Module";
	pub(crate) const MODULE_MAIN_CLASS: &str = "ModuleMainClass";
	pub(crate) const MODULE_PACKAGES: &str = "ModulePackages";
	pub(crate) const NEST_HOST: &str = "NestHost";
	pub(crate) const NEST_MEMBERS: &str = "NestMembers";
	pub(crate) const PERMITTED_SUBCLASSES: &str = "PermittedSubclasses";
	pub(crate) const RECORD: &str = "Record";
	pub(crate) const RUNTIME_VISIBLE_ANNOTATIONS: &str = "RuntimeVisibleAnnotations";
	pub(crate) const RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS: &str = "RuntimeVisibleParameterAnnotations";
	pub(crate) const RUNTIME_VISIBLE_TYPE_ANNOTATIONS: &str = "RuntimeVisibleTypeAnnotations";
	pub(crate) const RUNTIME_INVISIBLE_ANNOTATIONS: &str = "RuntimeInvisibleAnnotations";
	pub(crate) const RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS: &str = "RuntimeInvisibleParameterAnnotations";
	pub(crate) const RUNTIME_INVISIBLE_TYPE_ANNOTATIONS: &str = "RuntimeInvisibleTypeAnnotations";
	pub(crate) const SIGNATURE: &str = "Signature";
	pub(crate) const SOURCE_DEBUG_EXTENSION: &str = "SourceDebugExtension";
	pub(crate) const SOURCE_FILE: &str = "SourceFile";
	/// The `StackMap` attribute for JavaME, defined here:
	/// <https://docs.oracle.com/javame/8.0/api/cldc/api/Appendix1-verifier.pdf>
	pub(crate) const STACK_MAP: &str = "StackMap";
	pub(crate) const STACK_MAP_TABLE: &str = "StackMapTable";
	pub(crate) const SYNTHETIC: &str = "Synthetic";
}

pub(crate) mod type_annotation {
	pub(crate) const CLASS_TYPE_PARAMETER: u8 = 0x00;
	pub(crate) const METHOD_TYPE_PARAMETER: u8 = 0x01;
	pub(crate) const CLASS_EXTENDS: u8 = 0x10;
	pub(crate) const CLASS_TYPE_PARAMETER_BOUND: u8 = 0x11;
	pub(crate) const METHOD_TYPE_PARAMETER_BOUND: u8 = 0x12;
	pub(crate) const FIELD: u8 = 0x13;
	pub(crate) const METHOD_RETURN: u8 = 0x14;
	pub(crate) const METHOD_RECEIVER: u8 = 0x15;
	pub(crate) const METHOD_FORMAL_PARAMETER: u8 = 0x16;
	pub(crate) const THROWS: u8 = 0x17;
	pub(crate) const LOCAL_VARIABLE: u8 = 0x40;
	pub(crate) const RESOURCE_VARIABLE: u8 = 0x41;
	pub(crate) const EXCEPTION_PARAMETER: u8 = 0x42;
	pub(crate) const INSTANCE_OF: u8 = 0x43;
	pub(crate) const NEW: u8 = 0x44;
	pub(crate) const CONSTRUCTOR_REFERENCE: u8 = 0x45;
	pub(crate) const METHOD_REFERENCE: u8 = 0x46;
	pub(crate) const CAST: u8 = 0x47;
	pub(crate) const CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT: u8 = 0x48;
	pub(crate) const METHOD_INVOCATION_TYPE_ARGUMENT: u8 = 0x49;
	pub(crate) const CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT: u8 = 0x4a;
	pub(crate) const METHOD_REFERENCE_TYPE_ARGUMENT: u8 = 0x4b;
}

#[allow(unused)]
pub(crate) mod opcode {
	//! A module containing the opcodes by name, sorted by opcode.
	//!
	//! The [`IMPDEP1`], [`IMPDEP2`] and [`BREAKPOINT`] opcodes may not appear in `.class` files.
	//! They are [reserved](https://docs.oracle.com/javase/specs/jvms/se21/html/jvms-6.html#jvms-6.2) for internal use in the
	//! Java Virtual Machine.
	pub(crate) const NOP: u8 = 0x00;
	pub(crate) const ACONST_NULL: u8 = 0x01;
	pub(crate) const ICONST_M1: u8 = 0x02;
	pub(crate) const ICONST_0: u8 = 0x03;
	pub(crate) const ICONST_1: u8 = 0x04;
	pub(crate) const ICONST_2: u8 = 0x05;
	pub(crate) const ICONST_3: u8 = 0x06;
	pub(crate) const ICONST_4: u8 = 0x07;
	pub(crate) const ICONST_5: u8 = 0x08;
	pub(crate) const LCONST_0: u8 = 0x09;
	pub(crate) const LCONST_1: u8 = 0x0a;
	pub(crate) const FCONST_0: u8 = 0x0b;
	pub(crate) const FCONST_1: u8 = 0x0c;
	pub(crate) const FCONST_2: u8 = 0x0d;
	pub(crate) const DCONST_0: u8 = 0x0e;
	pub(crate) const DCONST_1: u8 = 0x0f;
	pub(crate) const BIPUSH: u8 = 0x10;
	pub(crate) const SIPUSH: u8 = 0x11;
	pub(crate) const LDC: u8 = 0x12;
	pub(crate) const LDC_W: u8 = 0x13;
	pub(crate) const LDC2_W: u8 = 0x14;
	pub(crate) const ILOAD: u8 = 0x15;
	pub(crate) const LLOAD: u8 = 0x16;
	pub(crate) const FLOAD: u8 = 0x17;
	pub(crate) const DLOAD: u8 = 0x18;
	pub(crate) const ALOAD: u8 = 0x19;
	pub(crate) const ILOAD_0: u8 = 0x1a;
	pub(crate) const ILOAD_1: u8 = 0x1b;
	pub(crate) const ILOAD_2: u8 = 0x1c;
	pub(crate) const ILOAD_3: u8 = 0x1d;
	pub(crate) const LLOAD_0: u8 = 0x1e;
	pub(crate) const LLOAD_1: u8 = 0x1f;
	pub(crate) const LLOAD_2: u8 = 0x20;
	pub(crate) const LLOAD_3: u8 = 0x21;
	pub(crate) const FLOAD_0: u8 = 0x22;
	pub(crate) const FLOAD_1: u8 = 0x23;
	pub(crate) const FLOAD_2: u8 = 0x24;
	pub(crate) const FLOAD_3: u8 = 0x25;
	pub(crate) const DLOAD_0: u8 = 0x26;
	pub(crate) const DLOAD_1: u8 = 0x27;
	pub(crate) const DLOAD_2: u8 = 0x28;
	pub(crate) const DLOAD_3: u8 = 0x29;
	pub(crate) const ALOAD_0: u8 = 0x2a;
	pub(crate) const ALOAD_1: u8 = 0x2b;
	pub(crate) const ALOAD_2: u8 = 0x2c;
	pub(crate) const ALOAD_3: u8 = 0x2d;
	pub(crate) const IALOAD: u8 = 0x2e;
	pub(crate) const LALOAD: u8 = 0x2f;
	pub(crate) const FALOAD: u8 = 0x30;
	pub(crate) const DALOAD: u8 = 0x31;
	pub(crate) const AALOAD: u8 = 0x32;
	pub(crate) const BALOAD: u8 = 0x33;
	pub(crate) const CALOAD: u8 = 0x34;
	pub(crate) const SALOAD: u8 = 0x35;
	pub(crate) const ISTORE: u8 = 0x36;
	pub(crate) const LSTORE: u8 = 0x37;
	pub(crate) const FSTORE: u8 = 0x38;
	pub(crate) const DSTORE: u8 = 0x39;
	pub(crate) const ASTORE: u8 = 0x3a;
	pub(crate) const ISTORE_0: u8 = 0x3b;
	pub(crate) const ISTORE_1: u8 = 0x3c;
	pub(crate) const ISTORE_2: u8 = 0x3d;
	pub(crate) const ISTORE_3: u8 = 0x3e;
	pub(crate) const LSTORE_0: u8 = 0x3f;
	pub(crate) const LSTORE_1: u8 = 0x40;
	pub(crate) const LSTORE_2: u8 = 0x41;
	pub(crate) const LSTORE_3: u8 = 0x42;
	pub(crate) const FSTORE_0: u8 = 0x43;
	pub(crate) const FSTORE_1: u8 = 0x44;
	pub(crate) const FSTORE_2: u8 = 0x45;
	pub(crate) const FSTORE_3: u8 = 0x46;
	pub(crate) const DSTORE_0: u8 = 0x47;
	pub(crate) const DSTORE_1: u8 = 0x48;
	pub(crate) const DSTORE_2: u8 = 0x49;
	pub(crate) const DSTORE_3: u8 = 0x4a;
	pub(crate) const ASTORE_0: u8 = 0x4b;
	pub(crate) const ASTORE_1: u8 = 0x4c;
	pub(crate) const ASTORE_2: u8 = 0x4d;
	pub(crate) const ASTORE_3: u8 = 0x4e;
	pub(crate) const IASTORE: u8 = 0x4f;
	pub(crate) const LASTORE: u8 = 0x50;
	pub(crate) const FASTORE: u8 = 0x51;
	pub(crate) const DASTORE: u8 = 0x52;
	pub(crate) const AASTORE: u8 = 0x53;
	pub(crate) const BASTORE: u8 = 0x54;
	pub(crate) const CASTORE: u8 = 0x55;
	pub(crate) const SASTORE: u8 = 0x56;
	pub(crate) const POP: u8 = 0x57;
	pub(crate) const POP2: u8 = 0x58;
	pub(crate) const DUP: u8 = 0x59;
	pub(crate) const DUP_X1: u8 = 0x5a;
	pub(crate) const DUP_X2: u8 = 0x5b;
	pub(crate) const DUP2: u8 = 0x5c;
	pub(crate) const DUP2_X1: u8 = 0x5d;
	pub(crate) const DUP2_X2: u8 = 0x5e;
	pub(crate) const SWAP: u8 = 0x5f;
	pub(crate) const IADD: u8 = 0x60;
	pub(crate) const LADD: u8 = 0x61;
	pub(crate) const FADD: u8 = 0x62;
	pub(crate) const DADD: u8 = 0x63;
	pub(crate) const ISUB: u8 = 0x64;
	pub(crate) const LSUB: u8 = 0x65;
	pub(crate) const FSUB: u8 = 0x66;
	pub(crate) const DSUB: u8 = 0x67;
	pub(crate) const IMUL: u8 = 0x68;
	pub(crate) const LMUL: u8 = 0x69;
	pub(crate) const FMUL: u8 = 0x6a;
	pub(crate) const DMUL: u8 = 0x6b;
	pub(crate) const IDIV: u8 = 0x6c;
	pub(crate) const LDIV: u8 = 0x6d;
	pub(crate) const FDIV: u8 = 0x6e;
	pub(crate) const DDIV: u8 = 0x6f;
	pub(crate) const IREM: u8 = 0x70;
	pub(crate) const LREM: u8 = 0x71;
	pub(crate) const FREM: u8 = 0x72;
	pub(crate) const DREM: u8 = 0x73;
	pub(crate) const INEG: u8 = 0x74;
	pub(crate) const LNEG: u8 = 0x75;
	pub(crate) const FNEG: u8 = 0x76;
	pub(crate) const DNEG: u8 = 0x77;
	pub(crate) const ISHL: u8 = 0x78;
	pub(crate) const LSHL: u8 = 0x79;
	pub(crate) const ISHR: u8 = 0x7a;
	pub(crate) const LSHR: u8 = 0x7b;
	pub(crate) const IUSHR: u8 = 0x7c;
	pub(crate) const LUSHR: u8 = 0x7d;
	pub(crate) const IAND: u8 = 0x7e;
	pub(crate) const LAND: u8 = 0x7f;
	pub(crate) const IOR: u8 = 0x80;
	pub(crate) const LOR: u8 = 0x81;
	pub(crate) const IXOR: u8 = 0x82;
	pub(crate) const LXOR: u8 = 0x83;
	pub(crate) const IINC: u8 = 0x84;
	pub(crate) const I2L: u8 = 0x85;
	pub(crate) const I2F: u8 = 0x86;
	pub(crate) const I2D: u8 = 0x87;
	pub(crate) const L2I: u8 = 0x88;
	pub(crate) const L2F: u8 = 0x89;
	pub(crate) const L2D: u8 = 0x8a;
	pub(crate) const F2I: u8 = 0x8b;
	pub(crate) const F2L: u8 = 0x8c;
	pub(crate) const F2D: u8 = 0x8d;
	pub(crate) const D2I: u8 = 0x8e;
	pub(crate) const D2L: u8 = 0x8f;
	pub(crate) const D2F: u8 = 0x90;
	pub(crate) const I2B: u8 = 0x91;
	pub(crate) const I2C: u8 = 0x92;
	pub(crate) const I2S: u8 = 0x93;
	pub(crate) const LCMP: u8 = 0x94;
	pub(crate) const FCMPL: u8 = 0x95;
	pub(crate) const FCMPG: u8 = 0x96;
	pub(crate) const DCMPL: u8 = 0x97;
	pub(crate) const DCMPG: u8 = 0x98;
	pub(crate) const IFEQ: u8 = 0x99;
	pub(crate) const IFNE: u8 = 0x9a;
	pub(crate) const IFLT: u8 = 0x9b;
	pub(crate) const IFGE: u8 = 0x9c;
	pub(crate) const IFGT: u8 = 0x9d;
	pub(crate) const IFLE: u8 = 0x9e;
	pub(crate) const IF_ICMPEQ: u8 = 0x9f;
	pub(crate) const IF_ICMPNE: u8 = 0xa0;
	pub(crate) const IF_ICMPLT: u8 = 0xa1;
	pub(crate) const IF_ICMPGE: u8 = 0xa2;
	pub(crate) const IF_ICMPGT: u8 = 0xa3;
	pub(crate) const IF_ICMPLE: u8 = 0xa4;
	pub(crate) const IF_ACMPEQ: u8 = 0xa5;
	pub(crate) const IF_ACMPNE: u8 = 0xa6;
	pub(crate) const GOTO: u8 = 0xa7;
	pub(crate) const JSR: u8 = 0xa8;
	pub(crate) const RET: u8 = 0xa9;
	pub(crate) const TABLESWITCH: u8 = 0xaa;
	pub(crate) const LOOKUPSWITCH: u8 = 0xab;
	pub(crate) const IRETURN: u8 = 0xac;
	pub(crate) const LRETURN: u8 = 0xad;
	pub(crate) const FRETURN: u8 = 0xae;
	pub(crate) const DRETURN: u8 = 0xaf;
	pub(crate) const ARETURN: u8 = 0xb0;
	pub(crate) const RETURN: u8 = 0xb1;
	pub(crate) const GETSTATIC: u8 = 0xb2;
	pub(crate) const PUTSTATIC: u8 = 0xb3;
	pub(crate) const GETFIELD: u8 = 0xb4;
	pub(crate) const PUTFIELD: u8 = 0xb5;
	pub(crate) const INVOKEVIRTUAL: u8 = 0xb6;
	pub(crate) const INVOKESPECIAL: u8 = 0xb7;
	pub(crate) const INVOKESTATIC: u8 = 0xb8;
	pub(crate) const INVOKEINTERFACE: u8 = 0xb9;
	pub(crate) const INVOKEDYNAMIC: u8 = 0xba;
	pub(crate) const NEW: u8 = 0xbb;
	pub(crate) const NEWARRAY: u8 = 0xbc;
	pub(crate) const ANEWARRAY: u8 = 0xbd;
	pub(crate) const ARRAYLENGHT: u8 = 0xbe;
	pub(crate) const ATHROW: u8 = 0xbf;
	pub(crate) const CHECKCAST: u8 = 0xc0;
	pub(crate) const INSTANCEOF: u8 = 0xc1;
	pub(crate) const MONITORENTER: u8 = 0xc2;
	pub(crate) const MONITOREXIT: u8 = 0xc3;
	pub(crate) const WIDE: u8 = 0xc4;
	pub(crate) const MULTIANEWARRAY: u8 = 0xc5;
	pub(crate) const IFNULL: u8 = 0xc6;
	pub(crate) const IFNONNULL: u8 = 0xc7;
	pub(crate) const GOTO_W: u8 = 0xc8;
	pub(crate) const JSR_W: u8 = 0xc9;

	// The following instructions must not be in .class files, but can be JVM internal
	pub(crate) const BREAKPOINT: u8 = 0xca;
	pub(crate) const IMPDEP1: u8 = 0xfe;
	pub(crate) const IMPDEP2: u8 = 0xff;
}

pub(crate) mod atype {
	pub(crate) const T_BOOLEAN: u8 = 4;
	pub(crate) const T_CHAR: u8 = 5;
	pub(crate) const T_FLOAT: u8 = 6;
	pub(crate) const T_DOUBLE: u8 = 7;
	pub(crate) const T_BYTE: u8 = 8;
	pub(crate) const T_SHORT: u8 = 9;
	pub(crate) const T_INT: u8 = 10;
	pub(crate) const T_LONG: u8 = 11;
}
